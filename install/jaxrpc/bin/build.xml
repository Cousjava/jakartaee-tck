<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<project name="TS top level" default="usage">
<!-- Do NOT load bin/build.properties.  It's already loaded by TSBuildListener
 Besides properties in bin/build.properties, the following properties are also 
 defined by TSBuildListener:
 ts.home
 class.dir: defined as ${ts.home}/classes
 vehicle.dir: defined as com/sun/ts/tests/common/vehicle
 -->
    <import file="xml/ts.top.import.xml" optional="true"/>
    <import file="../../../bin/xml/ts.top.import.xml" optional="true"/>

    <property file="${basedir}/build.properties" />
    <property file="${ts.home}/bin/build.properties" />
	<target name="usage">
		<echo message="Usage:ant [command]"/>
		<echo message="		build"/>
		<echo message="		buildall"/>
		<echo message="		clean"/>
		<echo message="		cleanall"/>
		<echo message="		deploy"/>
		<echo message="		deployall"/>
		<echo message="		undeploy"/>
		<echo message="		gui"/>
		<echo message="		runclient [-Dtest=InitConfigTest [-Dtest.client=URLClient.java]]"/>
		<echo message="		tslib"/>
		<echo message="		usage"/>
		<echo message="		ts.version"/>
	</target>


	<property name="lib.dir" value="com/sun/ts/lib" />
	<property name="lib.jar.name" value="jaxrpctck.jar" />
	<property name="lib.jar" value="${ts.home}/lib/${lib.jar.name}"/>

     <target name="init" >
          <!-- create the time stamp -->
          <tstamp/>
          <!-- create the build directory structure used by compile -->
          <mkdir dir="${class.dir}"/>
     </target>

	<target name="compile" depends="init">
		<javac  srcdir="${ts.home}/src" 
			destdir="${class.dir}" 
               includes="${pkg.dir}/**/*.java"
			debug="on" 
			deprecation="on" >
			<classpath>
        			<pathelement path="${ts.classpath}" />
      		</classpath>	
		</javac>
	</target>

	<target name="compile_toplevel" depends="init">
		<javac  srcdir="${ts.home}/src" 
			destdir="${class.dir}" 
               includes="${pkg.dir}/*.java"
			debug="on" 
			deprecation="on" >
			<classpath>
        			<pathelement path="${ts.classpath}" />
      		</classpath>	
		</javac>
	</target>
		
	<target name="build">
          <dosubdirs srcdir="${user.dir}" todo="build" includes="common/**"/>
          <dosubdirs srcdir="${user.dir}" todo="build" excludes="common/**"/>
     </target>

    <target name="buildall" depends="init">
      <property name="include.test.dir" value="jaxrpc"/>
      <property name="exclude.test.dir" value="nodir"/>
      <elementappend original="${include.test.dir}" prefix="com/sun/ts/tests" suffix="**/*.java" property="include.java.file"/>
      <elementappend original="${exclude.test.dir}" prefix="com/sun/ts/tests" suffix="**/*.java" property="exclude.java.file"/>
      <echo message="Compiling:${include.java.file}"/>
      <echo message="Excluding:${exclude.java.file}"/>
      <javac fork="true" srcdir="${ts.home}/src"
            destdir="${class.dir}"
            includes="${include.java.file}"
            excludes="${exclude.java.file}"
            memoryInitialSize="100m"
            memoryMaximumSize="200m"
            debug="on"
            deprecation="on" >
            <classpath>
                <pathelement path="${ts.classpath}" />
            </classpath>
      </javac>
      <dosubdirs srcdir="${ts.home}/src/com/sun/ts/tests" todo="package" includes="${include.test.dir}" excludes="${exclude.test.dir}"/>
    </target>


	<target name="move.work.dir" if="work.dir.present">
		<property name="work.dir.copy" value="${work.dir}copy"/>
		<delete failonerror="false" dir="${work.dir.copy}"/>
		<mkdir dir="${work.dir.copy}"/>
		<move todir="${work.dir.copy}">
			<fileset dir="${work.dir}"/>
		</move>
	</target>
   
	<target name="prepare.work.dir">
		<!-- /tmp works for both platforms -->
		<property name="work.dir" value="/tmp/JTwork"/>
		<available file="${work.dir}" type="dir" property="work.dir.present"/>
		<antcall target="move.work.dir"/>
		<mkdir dir="${work.dir}"/>
	</target>


	<target name="set.env">
		<condition property="ts.env" value="ts_win32">
			<and>
				<os family="windows"/>
			</and>
		</condition>
		<condition property="ts.env" value="ts_unix">
			<and>
				<os family="unix"/>
			</and>
		</condition>
	</target>
 
	<target name="get.client" if="test" unless="test.client">
		<getclient srcdir="${ts.home}/src/${pkg.dir}"/>
	</target>
	<target name="check.selected.test" if="test" depends="get.client">
		<property name="one.test" value="${test.client}#${test}"/>
	</target>
	<target name="no.selected.test" unless="test">
		<property name="one.test" value=""/>
	</target>

   <target name="check.java.options" if="env.JAVA_OPTIONS">
     <property name="java.options" value="${env.JAVA_OPTIONS}"/>
   </target>
   <target name="no.java.options" unless="env.JAVA_OPTIONS">
    <property name="java.options" value=""/>
   </target>

   <target name="set.keywords">
     <if>
       <or>
         <not>
           <isset property="keywords"/>
         </not>
         <equals arg1="${keywords}" arg2=""/>
       </or>
       <then>
         <var name="keywords" value="jaxrpc"/>
       </then>
     </if>
     <echo message="keywords are set to:  ${keywords}"/>
   </target>

	<target name="runclient" depends="set.env,set.keywords,prepare.work.dir,check.selected.test,no.selected.test,
       check.java.options, no.java.options"> 
		<echo message="path=${ts.classpath}"/>
      <condition property="tests.string" value="${multiple.tests}">
        <not>
          <or>
            <equals arg1="${multiple.tests}" arg2="$${multiple.tests}"/>
            <equals arg1="${multiple.tests}" arg2=""/>
          </or>
        </not>
      </condition>
      <condition property="tests.string" value="${ts.home}/src/${pkg.dir}/${one.test}">
        <or>
          <equals arg1="${multiple.tests}" arg2="$${multiple.tests}"/>
          <equals arg1="${multiple.tests}" arg2=""/>
        </or>
      </condition>
      <translatepath propname="local.classes"/>
      <translatepath propname="tests.string" type="initialfile"/>


		<java classname="com.sun.javatest.tool.Main" fork="yes" >
			<classpath>
   				<pathelement path="${ts.classpath}"/> 
      		</classpath>	
			<sysproperty key="java.compiler" value="NONE"/>
			<sysproperty key="TS_HOME" value="${ts.home}" />
			<sysproperty key="ts_home" value="${ts.home}" />
			<sysproperty key="LOCAL_CLASSES" value="${local.classes}" />
			<sysproperty key="JAVA_HOME" value="${java.home}"  />		
			<sysproperty key="JAVA_OPTIONS" value="${java.options}" />			
			<sysproperty key="WEBSERVER_HOST" value="${webserver.host}" />
			<sysproperty key="WEBSERVER_PORT" value="${webserver.port}" />
			<sysproperty key="cts.jtroutput" value="true" />
			<sysproperty key="windir" value="${env.windir}" />
			<sysproperty key="SYSTEMROOT" value="${env.SystemRoot}" />
			<sysproperty key="javatest.security.allowPropertiesAccess" value="true" />
			<sysproperty key="java.security.policy" value="${ts.home}/bin/harness.policy" />
			<sysproperty key="deliverable.class" value="${deliverable.class}" />
			<sysproperty key="TZ" value="US/Eastern"/>
			<arg line=" -EsysProps" />
			<arg line=" -batch" />
			<arg line=" -testsuite ${ts.home}/src" />
			<arg line=" -workDir ${work.dir}" />
			<arg line=" -envFiles ${ts.home}/bin/ts.jte" />
			<arg line=" -env ${ts.env}" />
			<arg line=" -excludeList ${ts.home}/bin/ts.jtx" />
            <arg line=" -keywords &quot;${keywords}&quot;"/>
          	<arg line=" -tests ${tests.string}"/>
		</java>
	</target>

   <target name="gui"> 
	<translatepath propname="local.classes"/>
		<java classname="com.sun.javatest.tool.Main" fork="yes" dir="${ts.home}/src">
			<classpath>
   				<pathelement path="${ts.classpath}"/> 
      		</classpath>	
			<sysproperty key="java.compiler" value="NONE"/>
			<sysproperty key="TS_HOME" value="${ts.home}" />
			<sysproperty key="ts_home" value="${ts.home}" />
			<sysproperty key="LOCAL_CLASSES" value="${local.classes}" />
			<sysproperty key="WEBSERVER_HOST" value="${webserver.host}" />
			<sysproperty key="WEBSERVER_PORT" value="${webserver.port}" />
			<sysproperty key="JAVA_HOME" value="${java.home}"  />		
			<sysproperty key="JAVA_OPTIONS" value="${java.options}" />			
			<sysproperty key="cts.jtroutput" value="true" />
			<sysproperty key="windir" value="${env.windir}" />
			<sysproperty key="SYSTEMROOT" value="${env.SystemRoot}" />
			<sysproperty key="javatest.security.allowPropertiesAccess" value="true" />
			<sysproperty key="java.security.policy" value="${ts.home}/bin/harness.policy" />
			<sysproperty key="deliverable.class" value="${deliverable.class}" />
			<sysproperty key="TZ" value="US/Eastern"/>
			<arg line="-EsysProps" />
			<jvmarg value="-Xms150m"/>
        	        <jvmarg value="-Xmx150m"/>
		</java>
	</target>

        <target name="clean">
        	<delete failonerror="false" includeEmptyDirs="true">
          		<fileset dir="${class.dir}/${pkg.dir}" excludes="PlaceHolder"/>
        	</delete>
        	<delete failonerror="false" includeEmptyDirs="true">
         		<fileset dir="${dist.dir}/${pkg.dir}" excludes="PlaceHolder"/>
        	</delete>
        </target>

	<target name="cleanall">
		<delete failonerror="false" includeEmptyDirs="true">
			<fileset dir="${class.dir}">
				<include name="**/jaxrpc/**"/>
			</fileset>
			<fileset dir="${class.dir}">
				<include name="**/webclient/**"/>
			</fileset>
		</delete>
		<delete failonerror="false" includeEmptyDirs="true">
			<fileset dir="${dist.dir}">
				<include name="**/jaxrpc/**"/>
			</fileset>
		</delete>
	</target>

	<target name="check.webapp.prop" unless="webapp.dir">
		<fail message="webapp.dir property not set in build.properties file"/>
	</target>

	<target name="does.webapp.dir.exist" depends="check.webapp.prop">
		<available file="${webapp.dir}" type="dir" property="webapp.dir.exists"/>
	</target>

	<target name="check.webapp.dir" depends="does.webapp.dir.exist" unless="webapp.dir.exists">
		<fail message="webapp directory set in build.properties file does not exist"/>
	</target>
	<target name="deploy" depends="check.webapp.dir">
		<dosubdirs srcdir="${user.dir}" todo="deploy"/> 
	</target>

	<target name="undeploy" depends="check.webapp.dir">
		<dosubdirs srcdir="${user.dir}" todo="undeploy"/> 
	</target>
    
	<target name="deployapp" depends="check.webapp.dir">
          <delete quiet="true" dir="${webapp.dir}/${app.name}" includeEmptyDirs="true"/>
          <delete quiet="true" file="${webapp.dir}/${app.name}.war" />
          <copy file="${dist.dir}/${pkg.dir}/${app.name}.war" todir="${webapp.dir}" />
	</target>
    
	<target name="undeployapp" depends="check.webapp.dir">
          <delete quiet="true" dir="${webapp.dir}/${app.name}" includeEmptyDirs="true"/>
          <delete quiet="true" file="${webapp.dir}/${app.name}.war" />
	</target>

	<target name="deployall" depends="check.webapp.dir">
	  <delete failonerror="false" includeEmptyDirs="true">
			<fileset dir="${webapp.dir}">
				<include name="servlet_*/**"/>
			</fileset>
			<fileset dir="${webapp.dir}">
				<include name="**/servlet_*.war"/>
			</fileset>
		</delete>
          <copy todir="${webapp.dir}" >
			<fileset dir="${dist.dir}">
				<include name="**/*.war"/>
			</fileset>
			<mapper type="flatten"/>
		</copy>
        </target>

	<target name="does.version.file.exist" >
		<available file="${ts.home}/bin/version" type="file" property="version.file.exists"/>
	</target>
	<target name="check.version.file" depends="does.version.file.exist" unless="version.file.exists">
		<fail message="version file (${ts.home}/bin/version) does not exist "/>
	</target>
	<target name="ts.version" depends="check.version.file" >
		<property file="${ts.home}/bin/version"/>
		<echo message="${ts.version} build ${ts.build}"/>
	</target>

	<!-- Tasks for managing ts specific jar  -->
	<!-- ts specific jar (in this case cts.jar) will be created in 
		ts.home/lib. -->

	<target name="tslib.clean" depends="init">
		<delete failonerror="false">
			<fileset dir="${class.dir}">
				<include name="${lib.pkg.dir}/deliverable/jaxrpc/**"/>
				<include name="${lib.pkg.dir}/implementation/sun/common/**"/>
				<include name="${lib.pkg.dir}/implementation/sun/jaxrpc/**"/>
			</fileset>
		</delete>
		<delete file="${lib.jar}"/>
	</target>

	<target name="tslib.compile" depends="tslib.clean">
		<javac srcdir="${ts.home}/src" destdir="${class.dir}" debug="on" deprecation="on" >
			<include name="${lib.pkg.dir}/deliverable/jaxrpc/**"/>
			<include name="${lib.pkg.dir}/implementation/sun/common/SunRIURL.java"/>
			<include name="${lib.pkg.dir}/implementation/sun/jaxrpc/CTSConstants.java"/>
			<include name="${lib.pkg.dir}/implementation/sun/jaxrpc/SunRIJAXRPC.java"/>
                        <classpath>
                                <pathelement path="${ts.classpath}" />
                        </classpath>
		</javac>
	</target>

	<target name="tslib" depends="tslib.compile">
		<jar jarfile="${lib.jar}" basedir="${class.dir}">
			<include name="${lib.pkg.dir}/deliverable/jaxrpc/**"/>
			<include name="${lib.pkg.dir}/implementation/sun/common/SunRIURL.class"/>
			<include name="${lib.pkg.dir}/implementation/sun/jaxrpc/CTSConstants.class"/>
			<include name="${lib.pkg.dir}/implementation/sun/jaxrpc/SunRIJAXRPC.class"/>
		</jar>
	</target>

<!--
    *************************************************************************
    JAX-RPC Specific rules used for JAX-RPC 1.1 TCK Release
    *************************************************************************
-->

        <property name="jaxrpc" value="com/sun/ts/tests/jaxrpc" />
        <property name="common.dir" value="com/sun/ts/tests/jaxrpc/common" />
	<property name="config.file" value="config.xml"/>
	<property name="url.alias" value="jaxrpc"/>

	<target name="compile_jaxrpc">
		<javac fork="true" srcdir="${ts.home}/src" 
			destdir="${class.dir}" 
            includes="${pkg.dir}/**/*.java"
            memoryMaximumSize="200m"
			debug="on" 
			deprecation="on" >
			<classpath>
        		<pathelement path="${ts.classpath}:${local.classes}" />
      		</classpath>	
		</javac>
	</target>

	<target name="check.jaxrpc.tool.features" if="jaxrpc.tool.features">
	    <property name="features" value="${jaxrpc.tool.features}"/>
	    <property name="features" value="${jaxrpc.tool.features}"/>
	    <property name="features" value="${jaxrpc.tool.features}"/>
	</target>

	<target name="no.jaxrpc.tool.features" unless="jaxrpc.tool.features">
	    <property name="features" value="-f:${jaxrpc.default.features}"/>
	    <property name="features" value="-f:${jaxrpc.default.features}"/>
	    <property name="features" value="-f:${jaxrpc.default.features}"/>
	</target>

	<target name="check.jaxrpc.tool.options" if="jaxrpc.tool.options">
	    <property name="options" value="${jaxrpc.tool.options}"/>
	    <property name="options" value="${jaxrpc.tool.options}"/>
	    <property name="options" value="${jaxrpc.tool.options}"/>
	</target>

	<target name="no.jaxrpc.tool.options" unless="jaxrpc.tool.options">
	    <property name="options" value=""/>
	    <property name="options" value=""/>
	    <property name="options" value=""/>
	</target>

	<target name="add_generated_class_dir" depends="check.jaxrpc.tool.options, no.jaxrpc.tool.options">
	    <property name="jaxrpc.client.only.args" value="${client.only.args} ${features} ${options} -d ${class.dir}/${pkg.dir}/generated_classes"/>
	    <property name="jaxrpc.server.only.args" value="${server.only.args} ${features} ${options} -d ${class.dir}/${pkg.dir}/generated_classes -model ${class.dir}/${pkg.dir}/generated_classes/model-file.gz"/>
	    <property name="jaxrpc.client.server.args" value="${client.server.args} ${features} ${options} -d ${class.dir}/${pkg.dir}/generated_classes -model ${class.dir}/${pkg.dir}/generated_classes/model-file.gz"/>
	</target>

	<target name="move.holders.dir" if="holders.dir.present">
          <move todir="${class.dir}/${pkg.dir}/holders">
	    <fileset dir="${class.dir}/${pkg.dir}/generated_classes/${pkg.dir}/holders" includes="**/*.class"/>
	  </move>
	</target>

	<target name="move.common.dir" if="common.dir.present">
          <move todir="${class.dir}/${common.dir}">
	    <fileset dir="${class.dir}/${pkg.dir}/generated_classes/${common.dir}" includes="**/*.class"/>
	  </move>
	</target>

        <target name="setup_target_dirs" depends="check.jaxrpc.tool.features, no.jaxrpc.tool.features, check.jaxrpc.tool.options, add_generated_class_dir">
    	  <delete failonerror="false" dir="${class.dir}/${pkg.dir}/generated_classes"/>
    	  <mkdir dir="${class.dir}/${pkg.dir}/generated_classes"/>
   	  <delete failonerror="false" dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF"/>
    	  <mkdir dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF"/>
        </target>

        <target name="move_classes">
          <mkdir dir="${class.dir}/${pkg.dir}/generated_classes/${pkg.dir}" />
          <move todir="${class.dir}/${pkg.dir}">
	    <fileset dir="${class.dir}/${pkg.dir}/generated_classes/${pkg.dir}" includes="**/*.class"/>
	  </move>
	  <available property="holders.dir.present" file="${class.dir}/${pkg.dir}/generated_classes/${pkg.dir}/holders" type="dir"/>
	  <antcall target="move.holders.dir"/>
	  <available property="common.dir.present" file="${class.dir}/${pkg.dir}/generated_classes/${common.dir}" type="dir"/>
	  <antcall target="move.common.dir"/>
	</target>

        <target name="copy_model">
          <copy file="${class.dir}/${pkg.dir}/generated_classes/model-file.gz" tofile="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/${service.name}-model.gz"/>
        </target>

        <target name="build_generated_classes_jar">
    	  <delete failonerror="false" dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/classes/${pkg.dir}"/>
    	  <mkdir dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/classes/${pkg.dir}"/>
    	  <delete failonerror="false" dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/lib"/>
    	  <mkdir dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/lib"/>
	  <jar jarfile="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF/lib/generated_classes.jar" basedir="${class.dir}/${pkg.dir}/generated_classes" includes="**/*.class"/>
	  <antcall target="move_classes"/>
    	  <delete failonerror="false">
	     <fileset dir="${class.dir}/${pkg.dir}/generated_classes" includes="**/*.class, **/*.java"/>
	  </delete>
        </target>

  	<target name="copy_runtime_wsdl_w2j">
    	  <delete failonerror="false">
	    <fileset dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF" includes="**/jaxrpc-ri-runtime.xml"/>
	  </delete>
          <copy todir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF">
	    <fileset dir="${ts.home}/src/${pkg.dir}" includes="**/jaxrpc-ri-runtime.xml"/>
	  </copy>
    	  <delete failonerror="false">
	    <fileset dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF" includes="**/*.wsdl, **/*.xsd"/>
	  </delete>
          <copy  todir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF">
	    <fileset dir="${ts.home}/src/${pkg.dir}" includes="**/*.wsdl, **/*.xsd"/>
	  </copy>
	  <antcall target="copy_model"/>
  	</target>

  	<target name="copy_runtime_wsdl_j2w">
    	  <delete failonerror="false">
	    <fileset dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF" includes="**/jaxrpc-ri-runtime.xml"/>
	  </delete>
          <copy todir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF">
	    <fileset dir="${ts.home}/src/${pkg.dir}" includes="**/jaxrpc-ri-runtime.xml"/>
	  </copy>
    	  <delete failonerror="false">
	    <fileset dir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF" includes="**/*.wsdl"/>
	  </delete>
          <copy  todir="${dist.dir}/${pkg.dir}/contentRoot/WEB-INF">
	    <fileset dir="${class.dir}/${pkg.dir}/generated_classes" includes="**/*.wsdl"/>
	  </copy>
	  <antcall target="copy_model"/>
  	</target>

  	<target name="wsdeploy">
	  <echo message="Invoking wsdeploy tool: ${jaxrpc.deploy.tool}"/>
	  <property name="iwar" value="${dist.dir}/${pkg.dir}/${app.name}-raw.war"/>
	  <property name="owar" value="${dist.dir}/${pkg.dir}/${app.name}.war"/>
    	  <exec executable="${jaxrpc.deploy.tool}" dir="${current.dir}">
      	    <arg line ="-keep -verbose -o ${owar} ${iwar}"/>
    	  </exec>
	</target>

  	<target name="do_wsdl2java_generate_steps" depends="setup_target_dirs">
	  <echo message="Invoking jaxrpc mapping tool: ${jaxrpc.tool}"/>
	  <echo message="WSDL2Java arguments: ${jaxrpc.client.server.args} ${config.file}"/>
	  <echo message="Current test directory: ${current.dir}"/>
    	  <exec executable="${jaxrpc.tool}" dir="${current.dir}">
      	    <arg line ="${jaxrpc.client.server.args} ${config.file}"/>
    	  </exec>
	  <antcall target="copy_runtime_wsdl_w2j"/>
	  <antcall target="build_generated_classes_jar"/>
  	</target>

  	<target name="do_wsdl2java_generate_steps_clientonly" depends="setup_target_dirs">
	  <echo message="Invoking jaxrpc mapping tool: ${jaxrpc.tool}"/>
	  <echo message="WSDL2Java arguments: ${jaxrpc.client.only.args} ${config.file}"/>
	  <echo message="Current test directory: ${current.dir}"/>
    	  <exec executable="${jaxrpc.tool}" dir="${current.dir}">
      	    <arg line ="${jaxrpc.client.only.args} ${config.file}"/>
    	  </exec>
	  <antcall target="move_classes"/>
  	</target>

  	<target name="do_wsdl2java_generate_steps_serveronly" depends="setup_target_dirs">
	  <echo message="Invoking jaxrpc mapping tool: ${jaxrpc.tool}"/>
	  <echo message="WSDL2Java arguments: ${jaxrpc.server.only.args} ${config.file}"/>
	  <echo message="Current test directory: ${current.dir}"/>
    	  <exec executable="${jaxrpc.tool}" dir="${current.dir}">
      	    <arg line ="${jaxrpc.server.only.args} ${config.file}"/>
    	  </exec>
	  <antcall target="copy_runtime_wsdl_w2j"/>
	  <antcall target="build_generated_classes_jar"/>
  	</target>

  	<target name="do_wsdl2java_generate_only" depends="check.jaxrpc.tool.features, no.jaxrpc.tool.features, check.jaxrpc.tool.options, add_generated_class_dir">
	  <echo message="Invoking jaxrpc mapping tool: ${jaxrpc.tool}"/>
	  <echo message="WSDL2Java arguments: ${jaxrpc.client.server.args} ${config.file}"/>
	  <echo message="Current test directory: ${current.dir}"/>
    	  <exec executable="${jaxrpc.tool}" dir="${current.dir}">
      	    <arg line ="${jaxrpc.client.server.args} ${config.file}"/>
    	  </exec>
	  <antcall target="copy_runtime_wsdl_w2j"/>
  	</target>

  	<target name="do_java2wsdl_generate_steps" depends="setup_target_dirs">
	  <echo message="Invoking jaxrpc mapping tool: ${jaxrpc.tool}"/>
	  <echo message="Java2WSDL arguments: ${jaxrpc.client.server.args} ${config.file}"/>
	  <echo message="Current test directory: ${current.dir}"/>
    	  <exec executable="${jaxrpc.tool}" dir="${current.dir}">
      	    <arg line ="${jaxrpc.client.server.args} ${config.file}"/>
    	  </exec>
	  <property name="url" value="http://${webserver.host}:${webserver.port}/${app.name}/${url.alias}/${port.name}"/>
	  <replace file="${class.dir}/${pkg.dir}/generated_classes/${service.name}.wsdl" value="${url}">
	    <replacefilter token="REPLACE_WITH_ACTUAL_URL"/>
	  </replace>
	  <antcall target="copy_runtime_wsdl_j2w"/>
	  <antcall target="build_generated_classes_jar"/>
  	</target>

  	<target name="do_java2wsdl_generate_steps_clientonly" depends="setup_target_dirs">
	  <echo message="Invoking jaxrpc mapping tool: ${jaxrpc.tool}"/>
	  <echo message="Java2WSDL arguments: ${jaxrpc.client.only.args} ${config.file}"/>
	  <echo message="Current test directory: ${current.dir}"/>
    	  <exec executable="${jaxrpc.tool}" dir="${current.dir}">
      	    <arg line ="${jaxrpc.client.only.args} ${config.file}"/>
    	  </exec>
	  <antcall target="move_classes"/>
  	</target>

  	<target name="do_java2wsdl_generate_steps_serveronly" depends="setup_target_dirs">
	  <echo message="Invoking jaxrpc mapping tool: ${jaxrpc.tool}"/>
	  <echo message="Java2WSDL arguments: ${jaxrpc.server.only.args} ${config.file}"/>
	  <echo message="Current test directory: ${current.dir}"/>
    	  <exec executable="${jaxrpc.tool}" dir="${current.dir}">
      	    <arg line ="${jaxrpc.server.only.args} ${config.file}"/>
    	  </exec>
	  <property name="url" value="http://${webserver.host}:${webserver.port}/${app.name}/${url.alias}/${port.name}"/>
	  <replace file="${class.dir}/${pkg.dir}/generated_classes/${service.name}.wsdl" value="${url}">
	    <replacefilter token="REPLACE_WITH_ACTUAL_URL"/>
	  </replace>
	  <antcall target="copy_runtime_wsdl_j2w"/>
	  <antcall target="build_generated_classes_jar"/>
  	</target>

  	<target name="do_java2wsdl_generate_only" depends="check.jaxrpc.tool.features, no.jaxrpc.tool.features, check.jaxrpc.tool.options, add_generated_class_dir">
	  <echo message="Invoking jaxrpc mapping tool: ${jaxrpc.tool}"/>
	  <echo message="Java2WSDL arguments: ${jaxrpc.client.server.args} ${config.file}"/>
	  <echo message="Current test directory: ${current.dir}"/>
    	  <exec executable="${jaxrpc.tool}" dir="${current.dir}">
      	    <arg line ="${jaxrpc.client.server.args} ${config.file}"/>
    	  </exec>
	  <property name="url" value="http://${webserver.host}:${webserver.port}/${app.name}/${url.alias}/${port.name}"/>
	  <replace file="${class.dir}/${pkg.dir}/generated_classes/${service.name}.wsdl" value="${url}">
	    <replacefilter token="REPLACE_WITH_ACTUAL_URL"/>
	  </replace>
	  <antcall target="copy_runtime_wsdl_j2w"/>
  	</target>
</project>
